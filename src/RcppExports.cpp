// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Cpporder
std::vector<double> Cpporder(std::vector<double>& y, std::vector<double>& x);
RcppExport SEXP _R2sample_Cpporder(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpporder(y, x));
    return rcpp_result_gen;
END_RCPP
}
// TS_cont
NumericVector TS_cont(NumericVector x, NumericVector y);
RcppExport SEXP _R2sample_TS_cont(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(TS_cont(x, y));
    return rcpp_result_gen;
END_RCPP
}
// TS_disc
NumericVector TS_disc(IntegerVector x, IntegerVector y, NumericVector vals, NumericVector ADweights);
RcppExport SEXP _R2sample_TS_disc(SEXP xSEXP, SEXP ySEXP, SEXP valsSEXP, SEXP ADweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ADweights(ADweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(TS_disc(x, y, vals, ADweights));
    return rcpp_result_gen;
END_RCPP
}
// TSw_cont
NumericVector TSw_cont(std::vector<double>& x, std::vector<double>& y, std::vector<double>& wx, std::vector<double>& wy);
RcppExport SEXP _R2sample_TSw_cont(SEXP xSEXP, SEXP ySEXP, SEXP wxSEXP, SEXP wySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type wy(wySEXP);
    rcpp_result_gen = Rcpp::wrap(TSw_cont(x, y, wx, wy));
    return rcpp_result_gen;
END_RCPP
}
// TSw_disc
Rcpp::NumericVector TSw_disc(Rcpp::IntegerVector x, Rcpp::IntegerVector y, Rcpp::NumericVector vals, Rcpp::NumericVector wx, Rcpp::NumericVector wy);
RcppExport SEXP _R2sample_TSw_disc(SEXP xSEXP, SEXP ySEXP, SEXP valsSEXP, SEXP wxSEXP, SEXP wySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wy(wySEXP);
    rcpp_result_gen = Rcpp::wrap(TSw_disc(x, y, vals, wx, wy));
    return rcpp_result_gen;
END_RCPP
}
// bincounter
Rcpp::IntegerVector bincounter(Rcpp::NumericVector x, Rcpp::NumericVector bins);
RcppExport SEXP _R2sample_bincounter(SEXP xSEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(bincounter(x, bins));
    return rcpp_result_gen;
END_RCPP
}
// calcTS
NumericVector calcTS(Rcpp::List dta, Rcpp::Function TS, int typeTS, Rcpp::List TSextra);
RcppExport SEXP _R2sample_calcTS(SEXP dtaSEXP, SEXP TSSEXP, SEXP typeTSSEXP, SEXP TSextraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type dta(dtaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type TS(TSSEXP);
    Rcpp::traits::input_parameter< int >::type typeTS(typeTSSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type TSextra(TSextraSEXP);
    rcpp_result_gen = Rcpp::wrap(calcTS(dta, TS, typeTS, TSextra));
    return rcpp_result_gen;
END_RCPP
}
// gen_sim_data
Rcpp::List gen_sim_data(List dta, List TSextra);
RcppExport SEXP _R2sample_gen_sim_data(SEXP dtaSEXP, SEXP TSextraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dta(dtaSEXP);
    Rcpp::traits::input_parameter< List >::type TSextra(TSextraSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sim_data(dta, TSextra));
    return rcpp_result_gen;
END_RCPP
}
// getI
int getI(NumericVector p);
RcppExport SEXP _R2sample_getI(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(getI(p));
    return rcpp_result_gen;
END_RCPP
}
// gen_cont_noweights
Rcpp::List gen_cont_noweights(NumericVector x, NumericVector y, List TSextra);
RcppExport SEXP _R2sample_gen_cont_noweights(SEXP xSEXP, SEXP ySEXP, SEXP TSextraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type TSextra(TSextraSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_cont_noweights(x, y, TSextra));
    return rcpp_result_gen;
END_RCPP
}
// gen_cont_weights
Rcpp::List gen_cont_weights(NumericVector x, NumericVector y, NumericVector wx, NumericVector wy, List TSextra);
RcppExport SEXP _R2sample_gen_cont_weights(SEXP xSEXP, SEXP ySEXP, SEXP wxSEXP, SEXP wySEXP, SEXP TSextraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wy(wySEXP);
    Rcpp::traits::input_parameter< List >::type TSextra(TSextraSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_cont_weights(x, y, wx, wy, TSextra));
    return rcpp_result_gen;
END_RCPP
}
// gen_disc
Rcpp::List gen_disc(NumericVector dtax, NumericVector dtay, NumericVector vals, List TSextra);
RcppExport SEXP _R2sample_gen_disc(SEXP dtaxSEXP, SEXP dtaySEXP, SEXP valsSEXP, SEXP TSextraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dtax(dtaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtay(dtaySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< List >::type TSextra(TSextraSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_disc(dtax, dtay, vals, TSextra));
    return rcpp_result_gen;
END_RCPP
}
// myTS2
NumericVector myTS2(IntegerVector x, IntegerVector y, NumericVector vals);
RcppExport SEXP _R2sample_myTS2(SEXP xSEXP, SEXP ySEXP, SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vals(valsSEXP);
    rcpp_result_gen = Rcpp::wrap(myTS2(x, y, vals));
    return rcpp_result_gen;
END_RCPP
}
// powerC
List powerC(Function rxy, NumericVector xparam, NumericVector yparam, Function TS, int typeTS, List TSextra, int B);
RcppExport SEXP _R2sample_powerC(SEXP rxySEXP, SEXP xparamSEXP, SEXP yparamSEXP, SEXP TSSEXP, SEXP typeTSSEXP, SEXP TSextraSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Function >::type rxy(rxySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xparam(xparamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yparam(yparamSEXP);
    Rcpp::traits::input_parameter< Function >::type TS(TSSEXP);
    Rcpp::traits::input_parameter< int >::type typeTS(typeTSSEXP);
    Rcpp::traits::input_parameter< List >::type TSextra(TSextraSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(powerC(rxy, xparam, yparam, TS, typeTS, TSextra, B));
    return rcpp_result_gen;
END_RCPP
}
// repC
Rcpp::NumericVector repC(Rcpp::NumericVector x, Rcpp::IntegerVector times);
RcppExport SEXP _R2sample_repC(SEXP xSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(repC(x, times));
    return rcpp_result_gen;
END_RCPP
}
// testC
List testC(List dta, Function TS, int typeTS, List TSextra, int B);
RcppExport SEXP _R2sample_testC(SEXP dtaSEXP, SEXP TSSEXP, SEXP typeTSSEXP, SEXP TSextraSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type dta(dtaSEXP);
    Rcpp::traits::input_parameter< Function >::type TS(TSSEXP);
    Rcpp::traits::input_parameter< int >::type typeTS(typeTSSEXP);
    Rcpp::traits::input_parameter< List >::type TSextra(TSextraSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(testC(dta, TS, typeTS, TSextra, B));
    return rcpp_result_gen;
END_RCPP
}
// wbincounter
Rcpp::NumericMatrix wbincounter(std::vector<double>& x, std::vector<double>& bins, std::vector<double>& w);
RcppExport SEXP _R2sample_wbincounter(SEXP xSEXP, SEXP binsSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(wbincounter(x, bins, w));
    return rcpp_result_gen;
END_RCPP
}
// weights
NumericVector weights(List dta);
RcppExport SEXP _R2sample_weights(SEXP dtaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dta(dtaSEXP);
    rcpp_result_gen = Rcpp::wrap(weights(dta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_R2sample_Cpporder", (DL_FUNC) &_R2sample_Cpporder, 2},
    {"_R2sample_TS_cont", (DL_FUNC) &_R2sample_TS_cont, 2},
    {"_R2sample_TS_disc", (DL_FUNC) &_R2sample_TS_disc, 4},
    {"_R2sample_TSw_cont", (DL_FUNC) &_R2sample_TSw_cont, 4},
    {"_R2sample_TSw_disc", (DL_FUNC) &_R2sample_TSw_disc, 5},
    {"_R2sample_bincounter", (DL_FUNC) &_R2sample_bincounter, 2},
    {"_R2sample_calcTS", (DL_FUNC) &_R2sample_calcTS, 4},
    {"_R2sample_gen_sim_data", (DL_FUNC) &_R2sample_gen_sim_data, 2},
    {"_R2sample_getI", (DL_FUNC) &_R2sample_getI, 1},
    {"_R2sample_gen_cont_noweights", (DL_FUNC) &_R2sample_gen_cont_noweights, 3},
    {"_R2sample_gen_cont_weights", (DL_FUNC) &_R2sample_gen_cont_weights, 5},
    {"_R2sample_gen_disc", (DL_FUNC) &_R2sample_gen_disc, 4},
    {"_R2sample_myTS2", (DL_FUNC) &_R2sample_myTS2, 3},
    {"_R2sample_powerC", (DL_FUNC) &_R2sample_powerC, 7},
    {"_R2sample_repC", (DL_FUNC) &_R2sample_repC, 2},
    {"_R2sample_testC", (DL_FUNC) &_R2sample_testC, 5},
    {"_R2sample_wbincounter", (DL_FUNC) &_R2sample_wbincounter, 3},
    {"_R2sample_weights", (DL_FUNC) &_R2sample_weights, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_R2sample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
